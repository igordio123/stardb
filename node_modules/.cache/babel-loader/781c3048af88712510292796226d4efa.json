{"ast":null,"code":"import _classCallCheck from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\stardb\\\\src\\\\components\\\\random-plane\\\\random-planet.js\";\nimport React from 'react';\nimport './random-planet.css';\nimport SwapiService from '../../services/SwapiService.js';\nimport Spinner from '../spinner/spinner.js';\n\nvar Planets =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Planets, _React$Component);\n\n  function Planets(props) {\n    var _this;\n\n    _classCallCheck(this, Planets);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Planets).call(this, props));\n    _this.swapiInf = new SwapiService();\n    _this.state = {\n      planet: {}\n    };\n    setInterval(function () {\n      _this.updatePlanet();\n    }, 5000);\n    return _this;\n  }\n\n  _createClass(Planets, [{\n    key: \"updatePlanet\",\n    value: function updatePlanet() {\n      var _this2 = this;\n\n      var id = Math.floor(Math.random() * 25 + 2);\n      this.swapiInf.getPlanet(id).then(function (planet) {\n        _this2.setState({\n          planet: planet\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$planet = this.state.planet,\n          id = _this$state$planet.id,\n          population = _this$state$planet.population,\n          RotationPeriod = _this$state$planet.RotationPeriod,\n          Diameter = _this$state$planet.Diameter,\n          name = _this$state$planet.name;\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Planets;\n}(React.Component);\n\n;\nexport default Planets;","map":{"version":3,"sources":["C:\\stardb\\src\\components\\random-plane\\random-planet.js"],"names":["React","SwapiService","Spinner","Planets","props","swapiInf","state","planet","setInterval","updatePlanet","id","Math","floor","random","getPlanet","then","setState","population","RotationPeriod","Diameter","name","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;IAGMC,O;;;;;AAWJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AADiB,UARnBC,QAQmB,GARR,IAAIJ,YAAJ,EAQQ;AAAA,UAPnBK,KAOmB,GAPZ;AACLC,MAAAA,MAAM,EAAC;AADF,KAOY;AAEjBC,IAAAA,WAAW,CAAC,YAAI;AAAC,YAAKC,YAAL;AAAoB,KAA1B,EAA4B,IAA5B,CAAX;AAFiB;AAKlB;;;;mCAGa;AAAA;;AACZ,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAd,GAAiB,CAA5B,CAAX;AAEA,WAAKR,QAAL,CAAcS,SAAd,CAAwBJ,EAAxB,EACGK,IADH,CACQ,UAAAR,MAAM,EAAE;AAClB,QAAA,MAAI,CAACS,QAAL,CAAc;AAACT,UAAAA,MAAM,EAANA;AAAD,SAAd;AAEG,OAJD;AAKD;;;6BAOQ;AAAA,+BAGsD,KAAKD,KAH3D,CAGDC,MAHC;AAAA,UAGOG,EAHP,sBAGOA,EAHP;AAAA,UAGUO,UAHV,sBAGUA,UAHV;AAAA,UAGqBC,cAHrB,sBAGqBA,cAHrB;AAAA,UAGoCC,QAHpC,sBAGoCA,QAHpC;AAAA,UAG6CC,IAH7C,sBAG6CA,IAH7C;AAIX,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEG;;;;EAxCmBpB,KAAK,CAACqB,S;;AAyC3B;AACD,eAAelB,OAAf","sourcesContent":["import React from 'react';\r\nimport './random-planet.css'\r\nimport SwapiService from '../../services/SwapiService.js'\r\nimport Spinner from '../spinner/spinner.js'\r\n\r\n\r\nclass Planets extends React.Component{\r\n\r\n\r\n  swapiInf = new SwapiService();\r\n  state ={\r\n    planet:{}\r\n\r\n\r\n  };\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    setInterval(()=>{this.updatePlanet()} ,5000);\r\n\r\n\r\n  };\r\n\r\n\r\n  updatePlanet(){\r\n    const id = Math.floor(Math.random()*25+2);\r\n\r\n    this.swapiInf.getPlanet(id)\r\n      .then(planet=>{\r\n  this.setState({planet})\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    const{planet:{id,population,RotationPeriod,Diameter,name}} = this.state;\r\nreturn <Spinner/>\r\n   \r\n  }\r\n};\r\nexport default Planets\r\n"]},"metadata":{},"sourceType":"module"}