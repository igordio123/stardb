{"ast":null,"code":"import _classCallCheck from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\stardb\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\stardb\\\\src\\\\components\\\\random-plane\\\\random-planet.js\";\nimport React from 'react';\nimport './random-planet.css';\nimport SwapiService from '../../services/SwapiService.js';\nimport Spinner from '../spinner/spinner.js';\n\nvar Planets =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Planets, _React$Component);\n\n  function Planets(props) {\n    var _this;\n\n    _classCallCheck(this, Planets);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Planets).call(this, props));\n    _this.swapiInf = new SwapiService();\n    _this.state = {\n      planet: {},\n      loading: true\n    };\n    setInterval(function () {\n      _this.updatePlanet();\n    }, 5000);\n    return _this;\n  }\n\n  _createClass(Planets, [{\n    key: \"updatePlanet\",\n    value: function updatePlanet() {\n      var _this2 = this;\n\n      var id = Math.floor(Math.random() * 25 + 2);\n      this.swapiInf.getPlanet(id).then(function (planet) {\n        _this2.setState({\n          planet: planet,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          _this$state$planet = _this$state.planet,\n          id = _this$state$planet.id,\n          population = _this$state$planet.population,\n          RotationPeriod = _this$state$planet.RotationPeriod,\n          Diameter = _this$state$planet.Diameter,\n          name = _this$state$planet.name,\n          loading = _this$state.loading;\n\n      if (loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"random-planet \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row main-planet\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Planets;\n}(React.Component);\n\n;\n\nvar PlanetView = function PlanetView() {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"img-planet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"https://starwars-visualguide.com/assets/img/planets/\".concat(id, \".jpg\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"planet-person\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, name), React.createElement(\"ul\", {\n    className: \"list-group-flush\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Population:\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, population)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"RotationPeriod :\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, RotationPeriod)), React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Diameter :\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, Diameter)))));\n};\n\nexport default Planets;","map":{"version":3,"sources":["C:\\stardb\\src\\components\\random-plane\\random-planet.js"],"names":["React","SwapiService","Spinner","Planets","props","swapiInf","state","planet","loading","setInterval","updatePlanet","id","Math","floor","random","getPlanet","then","setState","population","RotationPeriod","Diameter","name","Component","PlanetView"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './random-planet.css'\r\nimport SwapiService from '../../services/SwapiService.js'\r\nimport Spinner from '../spinner/spinner.js'\r\n\r\n\r\nclass Planets extends React.Component{\r\n\r\n\r\n  swapiInf = new SwapiService();\r\n  state ={\r\n    planet:{},\r\n    loading :true,\r\n\r\n\r\n  };\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    setInterval(()=>{this.updatePlanet()} ,5000);\r\n\r\n\r\n  };\r\n\r\n\r\n  updatePlanet(){\r\n    const id = Math.floor(Math.random()*25+2);\r\n\r\n    this.swapiInf.getPlanet(id)\r\n      .then(planet=>{\r\n  this.setState({\r\n    planet,\r\n    loading :false\r\n\r\n  })\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    const{planet:{id,population,RotationPeriod,Diameter,name},loading} = this.state;\r\n    if(loading){\r\n      return <Spinner/>\r\n    }\r\n    return (\r\n\r\n      <div className=\"random-planet \">\r\n\r\n        <div className=\"row main-planet\">\r\n      \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nconst PlanetView = ()=>{\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <div className='img-planet'>\r\n        <img src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}/>\r\n      </div>\r\n      <div className='planet-person'>\r\n        <h4>{name}</h4>\r\n        <ul className='list-group-flush'>\r\n          <li className='list-group-item'>\r\n            <span>Population:</span><span>{population\r\n          }</span>\r\n          </li>\r\n          <li className='list-group-item'>\r\n            <span>RotationPeriod :</span><span>{RotationPeriod}</span>\r\n          </li>\r\n          <li className='list-group-item'>\r\n            <span>Diameter :</span><span>{Diameter}</span>\r\n          </li>\r\n\r\n\r\n        </ul>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default Planets\r\n"]},"metadata":{},"sourceType":"module"}